/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */

// ConvertTo-TS run at 2016-10-04T11:27:14.3740571-07:00

// import org.junit.Ignore;
// import org.junit.Test;

// import static org.junit.Assert.assertEquals;
// import static org.junit.Assert.assertNull;
// import static org.junit.Assert.assertTrue;

/** Test parser execution.
 *
 *  For the non-greedy stuff, the rule is that .* or any other non-greedy loop
 *  (any + or * loop that has an alternative with '.' in it is automatically
 *  non-greedy) never sees past the end of the rule containing that loop.
 *  There is no automatic way to detect when the exit branch of a non-greedy
 *  loop has seen enough input to determine how much the loop should consume
 *  yet still allow matching the entire input. Of course, this is extremely
 *  inefficient, particularly for things like
 *
 *     block : '{' (block|.)* '}' ;
 *
 *  that need only see one symbol to know when it hits a '}'. So, I
 *  came up with a practical solution.  During prediction, the ATN
 *  simulator never fall off the end of a rule to compute the global
 *  FOLLOW. Instead, we terminate the loop, choosing the exit branch.
 *  Otherwise, we predict to reenter the loop.  For example, input
 *  "{ foo }" will allow the loop to match foo, but that's it. During
 *  prediction, the ATN simulator will see that '}' reaches the end of a
 *  rule that contains a non-greedy loop and stop prediction. It will choose
 *  the exit branch of the inner loop. So, the way in which you construct
 *  the rule containing a non-greedy loop dictates how far it will scan ahead.
 *  Include everything after the non-greedy loop that you know it must scan
 *  in order to properly make a prediction decision. these beasts are tricky,
 *  so be careful. don't liberally sprinkle them around your code.
 *
 *  To simulate filter mode, use ( .* (pattern1|pattern2|...) )*
 *
 *  Nongreedy loops match as much input as possible while still allowing
 *  the remaining input to match.
 */
export class TestParserExec extends BaseTest {
	/**
	 * This is a regression test for antlr/antlr4#118.
	 * https://github.com/antlr/antlr4/issues/118
	 */
	@Ignore("Performance impact of passing this test may not be worthwhile")
	@Test testStartRuleWithoutEOF(): void {
		let grammar: string = 
			"grammar T;\n"+
			"s @after {dumpDFA();}\n" +
			"  : ID | ID INT ID ;\n" +
			"ID : 'a'..'z'+ ;\n"+
			"INT : '0'..'9'+ ;\n"+
			"WS : (' '|'\\t'|'\\n')+ -> skip ;\n";
		let result: string =  execParser("T.g4", grammar, "TParser", "TLexer", "s",
								   "abc 34", true);
		let expecting: string = 
			"Decision 0:\n" +
			"s0-ID->s1\n" +
			"s1-INT->s2\n" +
			"s2-EOF->:s3=>1\n"; // Must point at accept state
		assertEquals(expecting, result);
		assertNull(this.stderrDuringParse);
	}

	/**
	 * This is a regression test for antlr/antlr4#588 "ClassCastException during
	 * semantic predicate handling".
	 * https://github.com/antlr/antlr4/issues/588
	 */
	@Test testFailedPredicateExceptionState(): void {
		let grammar: string =  load("Psl.g4", "UTF-8");
		let found: string =  execParser("Psl.g4", grammar, "PslParser", "PslLexer", "floating_constant", " . 234", false);
		assertEquals("", found);
		assertEquals("line 1:6 rule floating_constant DEC:A floating-point constant cannot have internal white space\n", stderrDuringParse);
	}

	/**
	 * This is a regression test for antlr/antlr4#563 "Inconsistent token
	 * handling in ANTLR4".
	 * https://github.com/antlr/antlr4/issues/563
	 */
	@Test testAlternateQuotes(): void {
		let lexerGrammar: string = 
			"lexer grammar ModeTagsLexer;\n" +
			"\n" +
			"// Default mode rules (the SEA)\n" +
			"OPEN  : 'Â«'     -> mode(ISLAND) ;       // switch to ISLAND mode\n" +
			"TEXT  : ~'Â«'+ ;                         // clump all text together\n" +
			"\n" +
			"mode ISLAND;\n" +
			"CLOSE : 'Â»'     -> mode(DEFAULT_MODE) ; // back to SEA mode \n" +
			"SLASH : '/' ;\n" +
			"ID    : [a-zA-Z]+ ;                     // match/send ID in tag to parser\n";
		let parserGrammar: string = 
			"parser grammar ModeTagsParser;\n" +
			"\n" +
			"options { tokenVocab=ModeTagsLexer; } // use tokens from ModeTagsLexer.g4\n" +
			"\n" +
			"file: (tag | TEXT)* ;\n" +
			"\n" +
			"tag : 'Â«' ID 'Â»'\n" +
			"    | 'Â«' '/' ID 'Â»'\n" +
			"    ;";

		let success: boolean =  rawGenerateAndBuildRecognizer("ModeTagsLexer.g4",
														lexerGrammar,
														null,
														"ModeTagsLexer");
		assertTrue(success);

		let found: string =  execParser("ModeTagsParser.g4", parserGrammar, "ModeTagsParser", "ModeTagsLexer", "file", "", false);
		assertEquals("", found);
		assertNull(stderrDuringParse);
	}

	/**
	 * This is a regression test for tunnelvisionlabs/antlr4cs#71 "Erroneous
	 * extraneous input detected in C# (but not in Java)".
	 * https://github.com/tunnelvisionlabs/antlr4cs/issues/71
	 */
	@Test
	testCSharpIssue71(): void {
		let grammar: string = 
			"grammar Expr;\n" +
			"\n" +
			"root\n" +
			"	:	assignment EOF\n" +
			"	;\n" +
			"\n" +
			"assignment\n" +
			"	:	LOCAL_VARIABLE '=' expression\n" +
			"	;\n" +
			"\n" +
			"expression\n" +
			"	:	logical_and_expression\n" +
			"	;\n" +
			"\n" +
			"logical_and_expression\n" +
			"	:	relational_expression ('AND' relational_expression)*\n" +
			"	;\n" +
			"\n" +
			"relational_expression\n" +
			"	:	primary_expression (('<'|'>') primary_expression)*\n" +
			"	;\n" +
			"\n" +
			"primary_expression\n" +
			"	:	'(' + expression + ')'\n" +
			"	|	UNSIGNED_INT\n" +
			"	|	LOCAL_VARIABLE\n" +
			"	;\n" +
			"\n" +
			"LOCAL_VARIABLE\n" +
			"	:	[_a-z][_a-zA-Z0-9]*\n" +
			"	;\n" +
			"\n" +
			"UNSIGNED_INT\n" +
			"	:	('0'|'1'..'9''0'..'9'*)\n" +
			"	;\n" +
			"\n" +
			"WS\n" +
			"	:	[ \\t\\r\\n]+ -> channel(HIDDEN)\n" +
			"	;\n";

		let input: string =  "b = (((a > 10)) AND ((a < 15)))";
		let found: string =  execParser("Expr.g4", grammar, "ExprParser", "ExprLexer", "root",
								  input, false);
		assertEquals("", found);
		assertNull(stderrDuringParse);
	}

	/**
	 * This is a regression test for antlr/antlr4#672 "Initialization failed in
	 * locals".
	 * https://github.com/antlr/antlr4/issues/672
	 */
	@Test testAttributeValueInitialization(): void {
		let grammar: string = 
			"grammar Data; \n" +
			"\n" +
			"file : group+ EOF; \n" +
			"\n" +
			"group: INT sequence {System.out.println($sequence.values.size);} ; \n" +
			"\n" +
			"sequence returns [List<Integer> values = new ArrayList<Integer>()] \n" +
			"  locals[List<Integer> localValues = new ArrayList<Integer>()]\n" +
			"         : (INT {$localValues.add($INT.int);})* {$values.addAll($localValues);}\n" +
			"; \n" +
			"\n" +
			"INT : [0-9]+ ; // match integers \n" +
			"WS : [ \\t\\n\\r]+ -> skip ; // toss out all whitespace\n";

		let input: string =  "2 9 10 3 1 2 3";
		let found: string =  execParser("Data.g4", grammar, "DataParser", "DataLexer", "file", input, false);
		assertEquals("6\n", found);
		assertNull(stderrDuringParse);
	}
}
